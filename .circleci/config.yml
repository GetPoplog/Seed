# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
jobs:
  one_line_install:
    machine:
      image: ubuntu-1604:202104-01
    steps:
      - run:
          command: |
            curl -LsS https://raw.githubusercontent.com/GetPoplog/Seed/main/GetPoplog.sh | sh

  build_src_tarball:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - run:
          name: Build poplog src tarball
          command: |
            make srctarball
      - store_artifacts:
          path: _build/artifacts
      - persist_to_workspace:
          root: _build
          paths:
            - 'artifacts/poplog*.tar.gz'

  build_tree:
    machine:
      image: ubuntu-1604:202104-01
    steps:
      - attach_workspace:
          at: _build
      - run:
          name: Extract src tarball
          command: |
            tar --strip-components=1 -xvf _build/artifacts/poplog*.tar.gz
      - run:
          name: Get system info
          command: |
            uname -a
            ldd --version
      - run:
          name: Install dependencies
          command: |
            sudo make jumpstart-ubuntu
      - run:
          name: Build poplog_base file-tree
          command: make build
      - run:
          name: TEST - Install Poplog
          command: sudo make install
      - run:
          name: TEST - Verify installation
          command: make verify-install
      - run:
          name: TEST - Uninstall Poplog
          command: sudo make uninstall
      - run:
          name: TEST - Verify uninstallation
          command: make verify-uninstall
      - run:
          name: Export file-tree as binary tarball
          command: |
            make binarytarball
            mkdir -p /tmp/tarballs
            cp _build/artifacts/poplog-binary*.tar.gz /tmp/tarballs/
      - store_artifacts:
          path: /tmp/tarballs
      - persist_to_workspace:
          root: _build
          paths:
            - 'artifacts/poplog-binary*.tar.gz'

  build_deb:
    machine:
      image: ubuntu-1604:202104-01
    steps:
      - checkout
      - attach_workspace:
          at: _build
      - run:
          name: Get system info
          command: |
            uname -a
            ldd --version
      - run:
          name: Build deb
          command: |
            ./.circleci/scripts/make_deb.sh
      - store_artifacts:
          path: _build/artifacts
      - persist_to_workspace:
          root: _build
          paths:
            - artifacts/*.deb

  build_debsrc:
    machine:
      image: ubuntu-1604:202104-01
    steps:
      - checkout
      - attach_workspace:
          at: _build
      - run:
          name: Get system info
          command: |
            uname -a
            ldd --version
      - run:
          name: Build deb source files (.dsc and tar.gz)
          command: |
            ./.circleci/scripts/make_debsrc.sh
      - store_artifacts:
          path: _build/artifacts
      - persist_to_workspace:
          root: _build
          paths:
            - artifacts/poplog*.dsc

  test_deb_1604:
    machine:
      image: ubuntu-1604:202104-01
    steps: &deb_systests_steps
      - checkout
      - run:
          name: Get system info
          command: |
            uname -a
            ldd --version
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y python3 python3-pip
            pip3 install pytest
      - attach_workspace:
          at: ./_build
      - run:
          name: 'Install Poplog from *.deb file'
          command: |
            sudo apt install -y ./_build/artifacts/poplog_*_amd64.deb
      - run:
          name: Run systests
          command: |
            make test
      - store_test_results:
          path: systests

  test_deb_2004:
    machine:
      image: ubuntu-2004:202104-01
    steps: *deb_systests_steps

  build_rpm:
    machine:
      image: ubuntu-1604:202104-01
    steps:
      - checkout
      - attach_workspace:
          at: _build
      - run:
          command: |
            docker run \
                -it \
                --security-opt seccomp=docker/poplog_seccomp.json \
                --volume $PWD:/mnt \
                centos:8 \
                /mnt/.circleci/scripts/make_rpm.sh /mnt
      - store_artifacts:
          path: _build/artifacts
      - persist_to_workspace:
          root: _build
          paths:
            - artifacts/*.rpm

  test_rpm_centos8:
    machine:
      image: ubuntu-1604:202104-01
    steps:
      - checkout
      - run:
          name: Get system info
          command: |
            uname -a
            ldd --version
      - attach_workspace:
          at: ./_build
      - run:
          name: 'Install Poplog from *.rpm file'
          command: |
            docker run \
                -it \
                --security-opt seccomp=docker/poplog_seccomp.json \
                -v $PWD:/mnt \
                centos:8 \
                /mnt/.circleci/scripts/test_rpm.sh /mnt
      - store_test_results:
          path: systests

  build_appimage:
    machine:
      image: ubuntu-1604:202104-01
    steps:
      - checkout
      - run:
          name: Get system info
          command: |
            uname -a
            ldd --version
      - attach_workspace:
          at: _build
      - run:
          command: |
            sudo apt update
            sudo apt install -y make curl libncurses5 libncurses5-dev
      - run:
          command: |
            make buildappimage POPLOG_HOME_DIR=/opt/poplog
            mkdir -p _build/artifacts
            mv _build/Poplog-x86_64.AppImage _build/artifacts/
      - store_artifacts:
          path: _build/artifacts/Poplog-x86_64.AppImage
          destination: Poplog-x86_64.AppImage
      - persist_to_workspace:
          root: _build
          paths:
            - artifacts/Poplog-x86_64.AppImage

  build_snap:
    docker:
      - image: cibuilds/snapcraft:core20
    steps:
      - checkout
      - run:
          name: Get system info
          command: |
            uname -a
            ldd --version
      - run:
          name: Get system info
          command: uname -a
      - attach_workspace:
          at: _build
      - run:
          command: |
            sudo apt update
            sudo apt install make 
      - run:
          command: |
            make buildsnapcraftready POPLOG_HOME_DIR=/opt/poplog
            pushd _build/dotsnap; snapcraft; popd
            mkdir -p _build/artifacts
            mv _build/dotsnap/poplog_16.0.1_amd64.snap _build/artifacts/
      - store_artifacts:
          path: _build/artifacts/poplog_16.0.1_amd64.snap
          destination: poplog_16.0.1_amd64.snap
      - persist_to_workspace:
          root: _build
          paths:
            - artifacts/poplog_16.0.1_amd64.snap

  test_contributor_tools:
    docker:
      - image: python:3
    steps:
      - checkout
      - run:
          name: Install requirements
          command: |
            pip3 install -r requirements.txt
      - run:
          name: Test contributor tools
          command: |
            cd contributor_tools
            pytest
      - store_test_results:
          path: contributor_tools/tests

  build_changelog:
    docker:
      - image: python:3
    steps:
      - checkout
      - run:
          name: Install deps
          command: |
            pip3 install -r requirements.txt
      - run:
          name: Generate latest markdown changelog
          command: |
            cd contributor_tools
            python make_changelog.py ../CHANGELOG.yml ../_build/CHANGELOG.md
      - persist_to_workspace:
          root: _build/
          paths:
            - CHANGELOG.md

  push_to_open_build_service:
    docker:
      - image: opensuse/tumbleweed
    steps:
      - checkout
      - run:
          name: Install dependencies for attaching workspace
          command: zypper install -y tar gzip
      - attach_workspace:
          at: ./_build
      - run:
          name: "Install osc tools"
          command: |
            zypper --non-interactive addrepo -C "https://download.opensuse.org/repositories/openSUSE:/Tools/openSUSE_15.3/openSUSE:Tools.repo"
            zypper --gpg-auto-import-keys refresh
            zypper --non-interactive install osc make
            mkdir -p ~/.config/osc
            cat > ~/.config/osc/oscrc \<<EOF
            [general]
            apiurl = https://api.opensuse.org
            checkout_no_colon = 1
            [https://api.opensuse.org]
            user=willprice
            pass=${OSC_KEY}
            credentials_mgr_class=osc.credentials.ObfuscatedConfigFileCredentialsManager
            EOF
      - run:
          name: "Deploy files to the Open Build Service"
          command: |
            # make spec file for RPM
            make _build/packaging/rpm/poplog.spec

            # Check out OBS repo
            cd ~
            osc checkout home:willprice
            cd home/willprice/poplog
            echo "Directory contents after checkout:"
            ls -lh

            # Clean repo
            rm *.tar.gz
            rm *.dsc
            echo "Directory contents after cleaning:"
            ls -lh

            # Update OBS repo contents
            cp ~/project/_build/artifacts/* .
            rm *.deb *.rpm
            for f in compat control copyright rules; do
              cp ~/project/packaging/deb/$f debian.$f
            done
            cp ~/project/_build/packaging/rpm/poplog.spec .
            mv poplog*.dsc poplog.dsc

            # Commit changes back to OBS repo
            osc add *
            echo "Directory contents before commit:"
            ls -lh
            osc commit -m "Update for v$(cat ~/project/VERSION)"

  publish_github_release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - checkout
      - attach_workspace:
          at: ./_build
      - run:
          name: "Publish Release on GitHub"
          command: |
            ls -l ./_build/artifacts/
            ghr \
              -t "${GITHUB_TOKEN}" \
              -u "${CIRCLE_PROJECT_USERNAME}" \
              -r "${CIRCLE_PROJECT_REPONAME}" \
              -c "${CIRCLE_SHA1}" \
              -delete "${CIRCLE_TAG}" \
              -n "v$(cat VERSION)" \
              -b "$(cat _build/CHANGELOG.md)" \
              ./_build/artifacts/

default_filters: &default_filters
  # required to run on tagged releases.
  tags:
    only: /.*/

workflows:
  version: 2
  mainflow:
    jobs:
      - one_line_install:
          filters:  *default_filters
      - build_src_tarball:
          filters:  *default_filters
      - build_tree:
          filters:  *default_filters
          requires:
            - build_src_tarball
      - build_deb:
          filters:  *default_filters
          requires:
            - test_contributor_tools
      - build_debsrc:
          filters:  *default_filters
          requires:
            - test_contributor_tools
      - build_rpm:
          filters:  *default_filters
      - build_appimage:
          requires:
            - build_tree
          filters:  *default_filters
      - build_snap:
          requires:
            - build_tree
          filters:  *default_filters
      - test_deb_1604:
          requires:
            - build_deb
          filters:  *default_filters
      - test_deb_2004:
          requires:
            - build_deb
          filters:  *default_filters
      - test_rpm_centos8:
          requires:
            - build_rpm
          filters:  *default_filters
      - test_contributor_tools:
          filters:  *default_filters
      - build_changelog:
          requires:
            - test_contributor_tools
          filters:  *default_filters
      - push_to_open_build_service:
          requires:
            - test_rpm_centos8
            - test_deb_1604
            - test_deb_2004
            - build_debsrc
            - build_deb
            - build_rpm
            - build_src_tarball
      - publish_github_release:
          requires:
            - test_deb_1604
            - test_deb_2004
            - test_rpm_centos8
            - build_changelog
            - build_appimage
            - build_snap
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+.*$/
